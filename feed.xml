<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://blog.larissareis.org/</id>
  <title>blog feed</title>
  <updated>2015-10-31T00:00:00Z</updated>
  <link rel="alternate" href="http://blog.larissareis.org/"/>
  <link rel="self" href="http://blog.larissareis.org/feed.xml"/>
  <author>
    <name>Larissa Reis</name>
    <uri>http://blog.larissareis.org</uri>
  </author>
  <entry>
    <id>tag:blog.larissareis.org,2015-10-31:/posts/tmux-mouse-scroll/</id>
    <title type="html">How to fix tmux mouse scrolling after 2.1 changes</title>
    <published>2015-10-31T00:00:00Z</published>
    <updated>2015-10-31T00:00:00Z</updated>
    <author>
      <name>Larissa Reis</name>
      <uri>http://blog.larissareis.org</uri>
    </author>
    <link rel="alternate" href="http://blog.larissareis.org/posts/tmux-mouse-scroll/"/>
    <content type="html">
&lt;p&gt;&lt;span&gt;I updated tmux to the newest 2.1 version&lt;/span&gt; and surprise! my mouse configuration
stopped working. According to the
&lt;a href="https://github.com/tmux/tmux/blob/master/CHANGES"&gt;changelog&lt;/a&gt;, mouse mode was
rewritten and made a lot simpler. All those options for &lt;code&gt;mouse-{resize,select}&lt;/code&gt;
and &lt;code&gt;mode-mouse&lt;/code&gt; were thrown away and replaced by one &lt;code&gt;mouse&lt;/code&gt; that turns on the
support for mouse inside tmux.&lt;/p&gt;

&lt;p&gt;From the manual,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mouse [on | off]  If on, tmux captures the mouse and
                  allows mouse events to be bound as
                  key bindings. See the MOUSE SUPPORT
                  section for details.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I didn’t want to do anything fancy, so just turning on mouse and using the
default bindings were enough to make mouse work again. There was only one little
problem: mouse scrolling was not working. Or rather, it worked only when I was
already inside copy-mode. Apparently the old behavior changed because people
couldn’t agree on how it should work, like how many lines should be skipped. So
now tmux guys decided to keep it simple and let people configure themselves.&lt;/p&gt;

&lt;p&gt;I’m using the configuration suggested
&lt;a href="https://www.reddit.com/r/tmux/comments/3paqoi/tmux_21_has_been_released/cw552qd"&gt;here&lt;/a&gt;
to use the mouse scroll to automatically enter copy-mode to scroll back into
history and leave copy-mode when you’re back at the bottom again. It also passes
through the key press instead of entering copy-mode if there is an alternate
screen, like mutt or less, that will handle the key themselves. I thought that
scrolling half a page was too much so in my tmux.conf I used scroll-up to skip
only one line at a time instead:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# makes scroll work
bind-key -T root WheelUpPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; copy-mode -e; send-keys -M"
bind-key -T root WheelDownPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; send-keys -M"
bind-key -t vi-copy WheelUpPane scroll-up
bind-key -t vi-copy WheelDownPane scroll-down
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is actually a lot of interesting new features introduced for version 2.1,
it’s worth taking a look at the changelog.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:blog.larissareis.org,2015-07-13:/posts/vim-y-behavior/</id>
    <title type="html">Vim Y behavior and yankring</title>
    <published>2015-07-13T00:00:00Z</published>
    <updated>2015-07-13T00:00:00Z</updated>
    <author>
      <name>Larissa Reis</name>
      <uri>http://blog.larissareis.org</uri>
    </author>
    <link rel="alternate" href="http://blog.larissareis.org/posts/vim-y-behavior/"/>
    <content type="html">
&lt;p&gt;&lt;span&gt;I’m a loyal Vi(m) soldier in the Editors Holy War&lt;/span&gt;, but unfortunately there are
some things on Vi(m) that just don’t make sense to me. One of those things is
the &lt;code&gt;Y&lt;/code&gt; behavior.&lt;/p&gt;

&lt;p&gt;One of the cool things about Vim is that there is a pattern, a logic that
governs those seemingly chaotic commands. It combines simple commands to perform
tasks (like &lt;code&gt;d[elete]i[nner]w[ord]&lt;/code&gt; and &lt;code&gt;d[elete]a[round]w[ord]&lt;/code&gt;) and keeps a
certain pattern on how those commands are modified (like d/c and D/C). The yank
command, however, deviates from this last rule in a kind of annoying way.&lt;/p&gt;

&lt;p&gt;Just to recap, &lt;code&gt;d&lt;/code&gt; command deletes text over motion, while &lt;code&gt;c&lt;/code&gt; changes text over
motion (or more accurately, deletes and enter insert mode). So &lt;code&gt;y&lt;/code&gt;, as expected,
yanks text over motion. Both &lt;code&gt;d&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt; have a correspondent &lt;code&gt;D&lt;/code&gt; and &lt;code&gt;C&lt;/code&gt;
command that deletes/changes text from current position until the end of the
line. So, naturally, you would expect &lt;code&gt;Y&lt;/code&gt; to do that same, however, instead it
will copy the whole line! Even Vim documentation acknowledges how illogical that
is.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                                                        Y
["x]Y   yank [count] lines [into register x] (synonym for
        yy, linewise).  If you like "Y" to work from the
        cursor to the end of line (which is more logical,
        but not Vi-compatible) use ":map Y y$".
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’ve used that mapping the documentation suggests on my vimrc for so long that I
even forget that’s not the original behavior. So imagine my surprise when &lt;code&gt;Y&lt;/code&gt;
suddenly stops working after I enabled a few new plugins the other day.&lt;/p&gt;

&lt;p&gt;It turns out &lt;a href="http://www.vim.org/scripts/script.php?script_id=1234"&gt;YankRing&lt;/a&gt;
was overriding my map and using the default Vi(m) &lt;code&gt;Y&lt;/code&gt; behavior.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nnoremap Y :&amp;lt;C-U&amp;gt;YRYankCount 'Y'&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unfortunately yankring doesn’t have a clean way of customizing mappings it uses
for each yankring key, so it created a workaround with a function
&lt;code&gt;YRRunAfterMaps()&lt;/code&gt;, which yankring calls after it has created the maps. So to
get my beloved &lt;code&gt;Y&lt;/code&gt; mapping back, all I have to do is use this function to set
the correct mapping on my vimrc:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;"make Y consistent with C and D on yankring
function! YRRunAfterMaps()
  nnoremap &amp;lt;silent&amp;gt; Y   :&amp;lt;C-U&amp;gt;YRYankCount 'y$'&amp;lt;CR&amp;gt;
endfunction
&lt;/code&gt;&lt;/pre&gt;

</content>
  </entry>
</feed>

